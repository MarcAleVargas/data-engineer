"""
####################################################################################################
This script helps you to understand how machine ready bits and programming languague interact.
####################################################################################################
"""
ascii = [
    {"Decimal":0,"Octal":0,"Hex":"00","Binary":"0000 0000","Value":"NUL","Description":"null character"},{"Decimal":1,"Octal":1,"Hex":"01","Binary":"0000 0001","Value":"SOH","Description":"start of header"},{"Decimal":2,"Octal":2,"Hex":"02","Binary":"0000 0010","Value":"STX","Description":"start of text"},{"Decimal":3,"Octal":3,"Hex":"03","Binary":"0000 0011","Value":"ETX","Description":"end of text"},{"Decimal":4,"Octal":4,"Hex":"04","Binary":"0000 0100","Value":"EOT","Description":"end of transmission"},{"Decimal":5,"Octal":5,"Hex":"05","Binary":"0000 0101","Value":"ENQ","Description":"enquiry"},{"Decimal":6,"Octal":6,"Hex":"06","Binary":"0000 0110","Value":"ACK","Description":"acknowledgment"},{"Decimal":7,"Octal":7,"Hex":"07","Binary":"0000 0111","Value":"BEL","Description":"bell"},{"Decimal":8,"Octal":10,"Hex":"08","Binary":"0000 1000","Value":"BS","Description":"backspace"},{"Decimal":9,"Octal":11,"Hex":"09","Binary":"0000 1001","Value":"HT","Description":"horizontal tab"},{"Decimal":10,"Octal":12,"Hex":"0A","Binary":"0000 1010","Value":"LF","Description":"line feed"},{"Decimal":11,"Octal":13,"Hex":"0B","Binary":"0000 1011","Value":"VT","Description":"vertical tab"},{"Decimal":12,"Octal":14,"Hex":"0C","Binary":"0000 1100","Value":"FF","Description":"form feed"},{"Decimal":13,"Octal":15,"Hex":"0D","Binary":"0000 1101","Value":"CR","Description":"carriage return"},{"Decimal":14,"Octal":16,"Hex":"0E","Binary":"0000 1110","Value":"SO","Description":"shift out"},{"Decimal":15,"Octal":17,"Hex":"0F","Binary":"0000 1111","Value":"SI","Description":"shift in"},{"Decimal":16,"Octal":20,"Hex":"10","Binary":"0001 0000","Value":"DLE","Description":"data link escape"},{"Decimal":17,"Octal":21,"Hex":"11","Binary":"0001 0001","Value":"DC1","Description":"device control 1 (XON)"},{"Decimal":18,"Octal":22,"Hex":"12","Binary":"0001 0010","Value":"DC2","Description":"device control 2"},{"Decimal":19,"Octal":23,"Hex":"13","Binary":"0001 0011","Value":"DC3","Description":"device control 3 (XOFF)"},{"Decimal":20,"Octal":24,"Hex":"14","Binary":"0001 0100","Value":"DC4","Description":"device control 4"},{"Decimal":21,"Octal":25,"Hex":"15","Binary":"0001 0101","Value":"NAK","Description":"negative acknowledgement"},{"Decimal":22,"Octal":26,"Hex":"16","Binary":"0001 0110","Value":"SYN","Description":"synchronous idle"},{"Decimal":23,"Octal":27,"Hex":"17","Binary":"0001 0111","Value":"ETB","Description":"end of transmission block"},{"Decimal":24,"Octal":30,"Hex":"18","Binary":"0001 1000","Value":"CAN","Description":"cancel"},{"Decimal":25,"Octal":31,"Hex":"19","Binary":"0001 1001","Value":"EM","Description":"end of medium"},{"Decimal":26,"Octal":32,"Hex":"1A","Binary":"0001 1010","Value":"SUB","Description":"substitute"},{"Decimal":27,"Octal":33,"Hex":"1B","Binary":"0001 1011","Value":"ESC","Description":"escape"},{"Decimal":28,"Octal":34,"Hex":"1C","Binary":"0001 1100","Value":"FS","Description":"file separator"},{"Decimal":29,"Octal":35,"Hex":"1D","Binary":"0001 1101","Value":"GS","Description":"group separator"},{"Decimal":30,"Octal":36,"Hex":"1E","Binary":"0001 1110","Value":"RS","Description":"request to send\/record separator"},{"Decimal":31,"Octal":37,"Hex":"1F","Binary":"0001 1111","Value":"US","Description":"unit separator"},{"Decimal":32,"Octal":40,"Hex":"20","Binary":"0010 0000","Value":"SP","Description":"space"},{"Decimal":33,"Octal":41,"Hex":"21","Binary":"0010 0001","Value":"!","Description":"exclamation mark"},{"Decimal":34,"Octal":42,"Hex":"22","Binary":"0010 0010","Value":"\u0009double quote\u000d\u000a035\u0009043\u000923\u00090010 0011\u0009#\u0009number sign\u000d\u000a036\u0009044\u000924\u00090010 0100\u0009$\u0009dollar sign\u000d\u000a037\u0009045\u000925\u00090010 0101\u0009%\u0009percent\u000d\u000a038\u0009046\u000926\u00090010 0110\u0009&\u0009ampersand\u000d\u000a039\u0009047\u000927\u00090010 0111\u0009'\u0009single quote\u000d\u000a040\u0009050\u000928\u00090010 1000\u0009(\u0009left\/opening parenthesis\u000d\u000a041\u0009051\u000929\u00090010 1001\u0009)\u0009right\/closing parenthesis\u000d\u000a042\u0009052\u00092A\u00090010 1010\u0009*\u0009asterisk\u000d\u000a043\u0009053\u00092B\u00090010 1011\u0009+\u0009plus\u000d\u000a044\u0009054\u00092C\u00090010 1100\u0009,\u0009comma\u000d\u000a045\u0009055\u00092D\u00090010 1101\u0009-\u0009minus or dash\u000d\u000a046\u0009056\u00092E\u00090010 1110\u0009.\u0009dot\u000d\u000a047\u0009057\u00092F\u00090010 1111\u0009\/\u0009forward slash\u000d\u000a048\u0009060\u000930\u00090011 0000\u00090\u0009 \u000d\u000a049\u0009061\u000931\u00090011 0001\u00091\u0009 \u000d\u000a050\u0009062\u000932\u00090011 0010\u00092\u0009 \u000d\u000a051\u0009063\u000933\u00090011 0011\u00093\u0009 \u000d\u000a052\u0009064\u000934\u00090011 0100\u00094\u0009 \u000d\u000a053\u0009065\u000935\u00090011 0101\u00095\u0009 \u000d\u000a054\u0009066\u000936\u00090011 0110\u00096\u0009 \u000d\u000a055\u0009067\u000937\u00090011 0111\u00097\u0009 \u000d\u000a056\u0009070\u000938\u00090011 1000\u00098\u0009 \u000d\u000a057\u0009071\u000939\u00090011 1001\u00099\u0009 \u000d\u000a058\u0009072\u00093A\u00090011 1010\u0009:\u0009colon\u000d\u000a059\u0009073\u00093B\u00090011 1011\u0009;\u0009semi-colon\u000d\u000a060\u0009074\u00093C\u00090011 1100\u0009<\u0009less than\u000d\u000a061\u0009075\u00093D\u00090011 1101\u0009=\u0009equal sign\u000d\u000a062\u0009076\u00093E\u00090011 1110\u0009>\u0009greater than\u000d\u000a063\u0009077\u00093F\u00090011 1111\u0009?\u0009question mark\u000d\u000a064\u0009100\u000940\u00090100 0000\u0009@\u0009at\" symbol","Description":""},{"Decimal":65,"Octal":101,"Hex":"41","Binary":"0100 0001","Value":"A","Description":" "},{"Decimal":66,"Octal":102,"Hex":"42","Binary":"0100 0010","Value":"B","Description":" "},{"Decimal":67,"Octal":103,"Hex":"43","Binary":"0100 0011","Value":"C","Description":" "},{"Decimal":68,"Octal":104,"Hex":"44","Binary":"0100 0100","Value":"D","Description":" "},{"Decimal":69,"Octal":105,"Hex":"45","Binary":"0100 0101","Value":"E","Description":" "},{"Decimal":70,"Octal":106,"Hex":"46","Binary":"0100 0110","Value":"F","Description":" "},{"Decimal":71,"Octal":107,"Hex":"47","Binary":"0100 0111","Value":"G","Description":" "},{"Decimal":72,"Octal":110,"Hex":"48","Binary":"0100 1000","Value":"H","Description":" "},{"Decimal":73,"Octal":111,"Hex":"49","Binary":"0100 1001","Value":"I","Description":" "},{"Decimal":74,"Octal":112,"Hex":"4A","Binary":"0100 1010","Value":"J","Description":" "},{"Decimal":75,"Octal":113,"Hex":"4B","Binary":"0100 1011","Value":"K","Description":" "},{"Decimal":76,"Octal":114,"Hex":"4C","Binary":"0100 1100","Value":"L","Description":" "},{"Decimal":77,"Octal":115,"Hex":"4D","Binary":"0100 1101","Value":"M","Description":" "},{"Decimal":78,"Octal":116,"Hex":"4E","Binary":"0100 1110","Value":"N","Description":" "},{"Decimal":79,"Octal":117,"Hex":"4F","Binary":"0100 1111","Value":"O","Description":" "},{"Decimal":80,"Octal":120,"Hex":"50","Binary":"0101 0000","Value":"P","Description":" "},{"Decimal":81,"Octal":121,"Hex":"51","Binary":"0101 0001","Value":"Q","Description":" "},{"Decimal":82,"Octal":122,"Hex":"52","Binary":"0101 0010","Value":"R","Description":" "},{"Decimal":83,"Octal":123,"Hex":"53","Binary":"0101 0011","Value":"S","Description":" "},{"Decimal":84,"Octal":124,"Hex":"54","Binary":"0101 0100","Value":"T","Description":" "},{"Decimal":85,"Octal":125,"Hex":"55","Binary":"0101 0101","Value":"U","Description":" "},{"Decimal":86,"Octal":126,"Hex":"56","Binary":"0101 0110","Value":"V","Description":" "},{"Decimal":87,"Octal":127,"Hex":"57","Binary":"0101 0111","Value":"W","Description":" "},{"Decimal":88,"Octal":130,"Hex":"58","Binary":"0101 1000","Value":"X","Description":" "},{"Decimal":89,"Octal":131,"Hex":"59","Binary":"0101 1001","Value":"Y","Description":" "},{"Decimal":90,"Octal":132,"Hex":"5A","Binary":"0101 1010","Value":"Z","Description":" "},{"Decimal":91,"Octal":133,"Hex":"5B","Binary":"0101 1011","Value":"[","Description":"left\/opening bracket"},{"Decimal":92,"Octal":134,"Hex":"5C","Binary":"0101 1100","Value":"\\","Description":"back slash"},{"Decimal":93,"Octal":135,"Hex":"5D","Binary":"0101 1101","Value":"]","Description":"right\/closing bracket"},{"Decimal":94,"Octal":136,"Hex":"5E","Binary":"0101 1110","Value":"^","Description":"caret\/circumflex"},{"Decimal":95,"Octal":137,"Hex":"5F","Binary":"0101 1111","Value":"_","Description":"underscore"},{"Decimal":96,"Octal":140,"Hex":"60","Binary":"0110 0000","Value":"`","Description":" "},{"Decimal":97,"Octal":141,"Hex":"61","Binary":"0110 0001","Value":"a","Description":" "},{"Decimal":98,"Octal":142,"Hex":"62","Binary":"0110 0010","Value":"b","Description":" "},{"Decimal":99,"Octal":143,"Hex":"63","Binary":"0110 0011","Value":"c","Description":" "},{"Decimal":100,"Octal":144,"Hex":"64","Binary":"0110 0100","Value":"d","Description":" "},{"Decimal":101,"Octal":145,"Hex":"65","Binary":"0110 0101","Value":"e","Description":" "},{"Decimal":102,"Octal":146,"Hex":"66","Binary":"0110 0110","Value":"f","Description":" "},{"Decimal":103,"Octal":147,"Hex":"67","Binary":"0110 0111","Value":"g","Description":" "},{"Decimal":104,"Octal":150,"Hex":"68","Binary":"0110 1000","Value":"h","Description":" "},{"Decimal":105,"Octal":151,"Hex":"69","Binary":"0110 1001","Value":"i","Description":" "},{"Decimal":106,"Octal":152,"Hex":"6A","Binary":"0110 1010","Value":"j","Description":" "},{"Decimal":107,"Octal":153,"Hex":"6B","Binary":"0110 1011","Value":"k","Description":" "},{"Decimal":108,"Octal":154,"Hex":"6C","Binary":"0110 1100","Value":"l","Description":" "},{"Decimal":109,"Octal":155,"Hex":"6D","Binary":"0110 1101","Value":"m","Description":" "},{"Decimal":110,"Octal":156,"Hex":"6E","Binary":"0110 1110","Value":"n","Description":" "},{"Decimal":111,"Octal":157,"Hex":"6F","Binary":"0110 1111","Value":"o","Description":" "},{"Decimal":112,"Octal":160,"Hex":"70","Binary":"0111 0000","Value":"p","Description":" "},{"Decimal":113,"Octal":161,"Hex":"71","Binary":"0111 0001","Value":"q","Description":" "},{"Decimal":114,"Octal":162,"Hex":"72","Binary":"0111 0010","Value":"r","Description":" "},{"Decimal":115,"Octal":163,"Hex":"73","Binary":"0111 0011","Value":"s","Description":" "},{"Decimal":116,"Octal":164,"Hex":"74","Binary":"0111 0100","Value":"t","Description":" "},{"Decimal":117,"Octal":165,"Hex":"75","Binary":"0111 0101","Value":"u","Description":" "},{"Decimal":118,"Octal":166,"Hex":"76","Binary":"0111 0110","Value":"v","Description":" "},{"Decimal":119,"Octal":167,"Hex":"77","Binary":"0111 0111","Value":"w","Description":" "},{"Decimal":120,"Octal":170,"Hex":"78","Binary":"0111 1000","Value":"x","Description":" "},{"Decimal":121,"Octal":171,"Hex":"79","Binary":"0111 1001","Value":"y","Description":" "},{"Decimal":122,"Octal":172,"Hex":"7A","Binary":"0111 1010","Value":"z","Description":" "},{"Decimal":123,"Octal":173,"Hex":"7B","Binary":"0111 1011","Value":"{","Description":"left\/opening brace"},{"Decimal":124,"Octal":174,"Hex":"7C","Binary":"0111 1100","Value":"|","Description":"vertical bar"},{"Decimal":125,"Octal":175,"Hex":"7D","Binary":"0111 1101","Value":"}","Description":"right\/closing brace"},{"Decimal":126,"Octal":176,"Hex":"7E","Binary":"0111 1110","Value":"~","Description":"tilde"},{"Decimal":127,"Octal":177,"Hex":"7F","Binary":"0111 1111","Value":"DEL","Description":"delete"}
    ]
####Generate bitnary combination base on words
def generate_binary_combination(msg):
    words = list(msg)
    bit_values = []
    for combine in words:
        for binary in ascii:
            if combine == binary['Value']:
                bit = binary['Binary']
                removeblanks = str(bit).replace(" ","")
                bit_values.append([int(digit) for digit in removeblanks])
    return bit_values
###decode the binary message with the given combination
def decode_binary_combination(*args):
    letters = []
    for result in args:
        for data in result:
            data = reversed(data)
            find_true = [pow(2, index) for index, value in enumerate(data) if value == 1]
            letters.append(sum(find_true))
    message = []
    for msg in letters:
        for value in ascii:
            value_to_look_for = value['Decimal']
            value_to_retrieve = value['Value']
            if msg == value_to_look_for:
                message.extend(value_to_retrieve)
    final_message = "".join(message)
    print(f'The binary input is:{result}\nthe message is {final_message}\nand decimal representation: {letters}')
decode_binary_combination(generate_binary_combination('Hello, World!'))